#include <iostream>
#include <ctime>
#include <cmath>
#include <sstream>

using namespace std;
// kak vvodit (func N) func - 1-R polygon 2-R circle 3-R ring, N- number of dotes
struct dot {
	double x, y;
	dot() {
		x = 0;
		y = 0;
	}
};


dot min(dot* dotes, int kolvo);
dot max(dot* dotes, int kolvo);
dot RandForm(dot maxDote, dot minDote);
double IsPointInsidePolygon(dot* p, int kolvo, dot Rand);
void RandomPolygon(dot* dotes, int kolvo);
double IsPointInsideCircle(dot Rand, double R);
double IsPointInsideRing(dot Rand, double R, double r);


int main(int argc, char* argv[]) {
	setlocale(LC_ALL, "russian");
    srand(time(NULL));
	int kolvo, func;
	int** hits;
	hits = new int* [50];
	for (int i = 0; i < 50; i++) {

		hits[i] = new int[100];

	}
	double N, G = 0;
	int I = 0;
	char* a;
	for (int i = 0; i < 50; i++) {
		for (int j = 0; j < 100; j++) {
			hits[i][j] = 0;
		}
	}
	if (!(a = argv[1])) {
		func = 0;
	}
	else {
		stringstream getchoice(argv[1]);
		getchoice >> func;
	}
	if (!(a = argv[2])) {
		N = 0;
	}
	else {
		stringstream getnumber(argv[2]);
		getnumber >> N;
	}
	if (func == 1 && N > 0) {
		kolvo = rand() % 10 + 3;
		cout << kolvo << endl;
		dot* dotes = new dot[kolvo];
		RandomPolygon(dotes, kolvo);     
		dot maxDot, minDot, RandDot;
		maxDot = max(dotes, kolvo);   
		minDot = min(dotes, kolvo);   

		for (int i = 0; i < N; i++) {
			RandDot = RandForm(maxDot, minDot);  
			I += IsPointInsidePolygon(dotes, kolvo, RandDot); 
			if (IsPointInsidePolygon(dotes, kolvo, RandDot)) {
				hits[(int)(RandDot.y * 50 / maxDot.y)][(int)(RandDot.x * 100 / maxDot.x)] += 1; 
			}

		}

		for (int y = 49; y >= 0; y--) {
			for (int x = 0; x < 99; x++) {
				cout << "\x1B[38;5;" << 16 + 6 * hits[y][x] << "m*"; 
			}                                                            
			cout << endl;

		}
		cout<<"\x1B[0m";
		double s = (maxDot.x - minDot.x) * (maxDot.y - minDot.y) * 1.0 * I / N;
		cout << "Площадь - " << s << endl;
		cout << "I - " << I << endl;

		delete[] hits;
	}
	if (func == 2 && N > 0) {
		double R;
		R = rand() % 25;
		cout << "Радиус оркужности - " << R << endl;
		dot maxDot, minDot, RandDot;
		maxDot.x = R * 2;
		maxDot.y = R * 2;
		minDot.x = 0;
		minDot.y = 0;

		for (int i = 0; i < N; i++) {
			RandDot = RandForm(maxDot, minDot);
			I += IsPointInsideCircle(RandDot, R);
			if (IsPointInsideCircle(RandDot, R)) {
				hits[(int)(RandDot.y * 50 / maxDot.y)][(int)(RandDot.x * 100 / maxDot.x)] += 1;
			}
		}

		for (int y = 49; y >= 0; y--) {
			for (int x = 0; x < 99; x++) {
				cout << "\x1B[38;5;" << 16 + 6 * hits[y][x] << "m*";
			}
			cout << endl;
		}
		cout << "\x1B[0m";
		double s = maxDot.x * maxDot.y * 1.0 * I / N;
		cout << "Площадь круга - " << s << endl;
		cout << "I - " << I << endl;

		delete[] hits;
	}

	if (func == 3 && N > 0) {
		double Rout, Rin;
		Rin = rand() % 25;
		Rout = rand() % 11 + 26;
		cout << "Радиус внешней окружности - " << Rout << endl;
		cout << "Радиус внутренней окружности - " << Rin << endl;
		dot maxDot, minDot, RandDot;
		maxDot.x = Rout * 2;
		maxDot.y = Rout * 2;
		minDot.x = 0;
		minDot.y = 0;

		for (int i = 0; i < N; i++) {
			RandDot = RandForm(maxDot, minDot);
			I += IsPointInsideRing(RandDot, Rout, Rin);
			if (IsPointInsideRing(RandDot, Rout, Rin)) {
				hits[(int)(RandDot.y * 50 / maxDot.y)][(int)(RandDot.x * 100 / maxDot.x)] += 1;

			}

		}

		for (int y = 49; y >= 0; y--) {
			for (int x = 0; x < 99; x++) {
				cout << "\x1B[38;5;" << 16 + 6 * hits[y][x] << "ma";
			}
			cout << endl;
		}
		cout<<"\x1B[0m";
		double s = maxDot.x * maxDot.y * 1.0 * I / N;
		cout << "Площадь кольца - " << s << endl;
		cout << "I - " << I << endl;

		delete[] hits;
	}
	else if (func <= 0 || func > 3 || N <= 0) {
		cout<<"Неизвестная команда\n";
	}
	return 0;
}
double IsPointInsideCircle(dot Rand, double R) {
	double a;
	a = (Rand.x - R) * (Rand.x - R) + (Rand.y - R) * (Rand.y - R);
	if (a <= R*R) { return 1; }
	return 0;
}
double IsPointInsideRing(dot Rand, double R, double r) {
	double a;
	a = (Rand.x - R) * (Rand.x - R) + (Rand.y - R) * (Rand.y - R);
	if (a <= R*R && a >= r*r) { return 1; }
	return 0;
}
double IsPointInsidePolygon(dot* p, int kolvo, dot Rand){
	int i1, i2, n, N, flag;
	double S, S1, S2, S3;
	N = kolvo;
	for (n = 0; n < N; n++){
		flag = 0;
		i1 = n < N - 1 ? n + 1 : 0;
		while (flag == 0){
			i2 = i1 + 1;
			if (i2 >= N)
				i2 = 0;
			if (i2 == (n < N - 1 ? n + 1 : 0))
				break;
			S = abs(p[i1].x * (p[i2].y - p[n].y) +   
				p[i2].x * (p[n].y - p[i1].y) +
				p[n].x * (p[i1].y - p[i2].y));
			S1 = abs(p[i1].x * (p[i2].y - Rand.y) +     
				p[i2].x * (Rand.y - p[i1].y) +       
				Rand.x * (p[i1].y - p[i2].y));
			S2 = abs(p[n].x * (p[i2].y - Rand.y) +       
				p[i2].x * (Rand.y - p[n].y) +        
				Rand.x * (p[n].y - p[i2].y));
			S3 = abs(p[i1].x * (p[n].y - Rand.y) +       
				p[n].x * (Rand.y - p[i1].y) +        
				Rand.x * (p[i1].y - p[n].y));
			if (abs(S - (S1 + S2 + S3)) < 0.0001){                                      
				flag = 1;                       
				break;
			}
			i1 = i1 + 1;
			if (i1 >= N)
				i1 = 0;
		}
		if (flag == 0)
			break;
	}
	return flag;
}
dot max(dot* dotes, int kolvo) {
	dot max = dotes[0];
	for (int i = 1; i < kolvo; i++) {
		if (dotes[i].x > max.x)
			max.x = dotes[i].x;
		if (dotes[i].y > max.y)
			max.y = dotes[i].y;
	}
	return max;
}
dot min(dot* dotes, int kolvo) {
	dot min = dotes[0];
	for (int i = 1; i < kolvo; i++) {
		if (dotes[i].x < min.x)
			min.x = dotes[i].x;
		if (dotes[i].y < min.y)
			min.y = dotes[i].y;
	}
	return min;
}
dot RandForm(dot maxDot, dot minDot) {
	dot point;
	do { point.x = (rand() % (int)(maxDot.x - minDot.x) + minDot.x) + (float)(rand() % 1000) / 1000; }
	while (point.x < minDot.x && point.x > maxDot.x);
	do { point.y = (rand() % (int)(maxDot.y - minDot.y) + minDot.y) + (float)(rand() % 1000) / 1000; }
	while (point.y< minDot.y && point.y > maxDot.y);
	return point;
}
void RandomPolygon(dot* dotes, int kolvo) {
	double Length, LengthOfPart, x = 0, y, NumberOfParts;
	Length = rand() % 101 + 10;
	if (kolvo % 2 != 0) {
		NumberOfParts = (kolvo - 1) / 2.0;
		LengthOfPart = Length / NumberOfParts;
		for (int i = 0; i < NumberOfParts; i++) {
			x += LengthOfPart;
			y = (rand() % 25) + (float)(rand() % 1000) / 1000;
			dotes[i].x = x;
			dotes[i].y = y;
		}
		LengthOfPart = Length / (NumberOfParts + 1);
		for (int i = NumberOfParts; i < 2 * NumberOfParts + 1; i++) {
			x = x - LengthOfPart;
			y = (rand() % 50 + 25) + (float)(rand() % 1000) / 1000;
			dotes[i].x = x;
			dotes[i].y = y;
		}
	}
	else {
		NumberOfParts = kolvo / 2.0;
		LengthOfPart = Length / NumberOfParts;
		for (int i = 0; i < NumberOfParts; i++) {
			x = x + LengthOfPart;
			y = (rand() % 25) + (float)(rand() % 1000) / 1000;
			dotes[i].x = x;
			dotes[i].y = y;
		}
		for (int i = NumberOfParts; i < 2 * NumberOfParts; i++) {
			x = x - LengthOfPart;
			y = (rand() % 50 + 26) + (float)(rand() % 1000) / 1000;
			dotes[i].x = x;
			dotes[i].y = y;
		}
	}
}
